def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdk 31
    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.libsdl.app"
        }
        minSdkVersion 29
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        ndkPath "C:\\Android\\Sdk\\ndk\\25.1.8937393"
        externalNativeBuild {
            //ndkBuild {
            //    arguments "APP_PLATFORM=android-16"
            //    abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //}
            cmake {
                 arguments "-DANDROID_STL=c++_shared", "-D__ANDROID__=1", "-DSDL2_SOURCE_DIR=C:/perso/REDRIVER2/.build/packages/SDL2"
                 cppFlags "-std=c++11"
                 cFlags "-std=c11"
                 abiFilters 'armeabi-v7a', 'x86'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            //ndkBuild {
            //    path 'jni/Android.mk'
            //}

            cmake {
                version "3.22.1"
                path 'jni/CMakeLists.txt'
            }
        }
       
    }
    lintOptions {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
